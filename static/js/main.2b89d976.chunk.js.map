{"version":3,"sources":["components/Navbar/Navbar.js","components/Cat/Cat.js","App.js","serviceWorker.js","index.js"],"names":["titleStyle","margin","float","fontSize","scoreStyle","headerStyle","height","background","color","Navbar","props","react_default","a","createElement","style","score","high","Cat","className","onClick","selectCat","alias","alt","src","image","App","state","cats","Cats","unselected","shuffleArray","array","i","length","j","Math","floor","random","_ref","undefined","_this","find","cat","console","log","setState","newUnselected","filter","_this2","this","components_Navbar_Navbar","map","components_Cat_Cat","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kvCAEMA,EAAa,CACfC,OAAQ,oBACRC,MAAO,OACPC,SAAU,QAGRC,EAAa,CACfH,OAAQ,oBACRC,MAAO,SAGLG,EAAc,CAChBJ,OAAQ,OACRK,OAAQ,OACRC,WAAY,QACZC,MAAO,SAWIC,EARA,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,MAAIC,MAAOT,GACPM,EAAAC,EAAAC,cAAA,QAAMC,MAAOd,GAAb,gBACAW,EAAAC,EAAAC,cAAA,QAAMC,MAAOV,GAAb,kBAAyCM,EAAMK,MAA/C,kBAAqEL,EAAMM,QCdpEC,SANH,SAAAP,GAAK,OACbC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACPP,EAAAC,EAAAC,cAAA,OAAKM,QAAS,kBAAMT,EAAMU,UAAUV,EAAMW,QAAQC,IAAKZ,EAAMW,MAAOE,IAAKb,EAAMc,kBC8D5EC,oNA5DbC,MAAQ,CACNX,MAAO,EACPC,KAAM,EACNW,KAAMC,EACNC,WAAYD,KAGdE,aAAe,SAAAC,GACb,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADDM,EAEhB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFgCM,EAAA,GAE5BP,EAAMG,GAFsBI,EAAA,OAM7ClB,UAAY,SAAAC,GACV,QAA8DkB,IAA3DC,EAAKd,MAAMG,WAAWY,KAAK,SAAAC,GAAG,OAAIA,EAAIrB,QAAUA,IACjDsB,QAAQC,IAAIvB,GACZsB,QAAQC,IAAI,UACZJ,EAAKK,SAAS,CACZ9B,MAAO,EACPC,KAAOwB,EAAKd,MAAMX,MAAQyB,EAAKd,MAAMV,KAAQwB,EAAKd,MAAMX,MAAQyB,EAAKd,MAAMV,KAC3EW,KAAMC,EACNC,WAAYD,QAGX,CACHe,QAAQC,IAAI,UACZ,IAAME,EAAgBN,EAAKd,MAAMG,WAAWkB,OAAO,SAAAL,GAAG,OAAIA,EAAIrB,QAAUA,IACxEmB,EAAKK,SAAS,CACZ9B,MAAOyB,EAAKd,MAAMX,MAAQ,EAC1BY,KAAMC,EACNC,WAAYiB,IAKhBN,EAAKV,aAAaF,4EAGX,IAAAoB,EAAAC,KACP,OACEtC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACqC,EAAD,CACEnC,MAAOkC,KAAKvB,MAAMX,MAClBC,KAAMiC,KAAKvB,MAAMV,OAEnBL,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WACZ+B,KAAKvB,MAAMC,KAAKwB,IAAI,SAAAT,GAAG,OACtB/B,EAAAC,EAAAC,cAACuC,EAAD,CACE/B,MAAOqB,EAAIrB,MACXG,MAAOkB,EAAIlB,MACXJ,UAAW4B,EAAK5B,uBApDZiC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2b89d976.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst titleStyle = {\r\n    margin: 'auto auto auto 5%',\r\n    float: 'left',\r\n    fontSize: '50px'\r\n}\r\n\r\nconst scoreStyle = {\r\n    margin: 'auto 5% auto auto',\r\n    float: 'right',\r\n}\r\n\r\nconst headerStyle = {\r\n    margin: 'auto',\r\n    height: '10vh',\r\n    background: 'black',\r\n    color: 'white'\r\n}\r\n\r\nconst Navbar = props => (\r\n    <h1 style={headerStyle}>\r\n        <span style={titleStyle}>Clicky Cats!</span>\r\n        <span style={scoreStyle}>Current Score: {props.score} | High Score: {props.high}</span>               \r\n    </h1>\r\n)\r\n\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport './Cat.css'\r\n\r\nconst Cat = props => (\r\n    <div className=\"Cat\">\r\n            <img onClick={() => props.selectCat(props.alias)} alt={props.alias} src={props.image}/>\r\n    </div>\r\n);\r\n\r\nexport default Cat","import React, { Component } from 'react';\nimport Navbar from './components/Navbar'\nimport Cat from './components/Cat'\nimport Cats from './cats.json'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    score: 0,\n    high: 0,\n    cats: Cats,\n    unselected: Cats\n  }\n\n  shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  selectCat = alias => {\n    if(this.state.unselected.find(cat => cat.alias === alias) === undefined){\n      console.log(alias)\n      console.log(\"Wrong!\")\n      this.setState({\n        score: 0,\n        high: (this.state.score > this.state.high) ? this.state.score : this.state.high,\n        cats: Cats,\n        unselected: Cats\n      })\n    }\n    else {\n      console.log(\"Right!\")\n      const newUnselected = this.state.unselected.filter(cat => cat.alias !== alias);\n      this.setState({\n        score: this.state.score + 1,\n        cats: Cats,\n        unselected: newUnselected\n      })\n    }\n\n\n    this.shuffleArray(Cats)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar\n          score={this.state.score}\n          high={this.state.high}\n        />\n        <div className=\"wrapper\">\n          {this.state.cats.map(cat => (\n            <Cat\n              alias={cat.alias}\n              image={cat.image}\n              selectCat={this.selectCat}\n            />\n          ))}\n        </div>      \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}